server:
  port: 80
spring:
  cloud:
    consul:
      discovery:
        prefer-ip-address: true
      host: localhost
      port: 8500
      service-name: ${spring.application.name}
    openfeign:
      client:
        config:
          default:
            connect-timeout: 3000 #连接超时时间
            read-timeout: 3000 #读取超时时间
          cloud-payment-service:
            connect-timeout: 20000 #连接超时时间
            read-timeout: 20000 #读取超时时间
      httpclient:
        hc5:
          enabled: true
      #      请求与响应压缩 GZIP，减少通讯损耗
      #      compression:
      #        request:
      #          enabled: true
      #        response:
      #          enabled: true
      #       细粒度化配置
      compression:
        request:
          enabled: true
          mime-types: text/html,application/xml,application/json #触发压缩数据类型
          min-request-size: 2048 #最小触发压缩大小
        response:
          enabled: true
      circuitbreaker: # 开启circuitBreaker和分组激活
        enabled: true
        group:
          enabled: false  # 使用thread-pool-bulkhead需要设为false

  application:
    name: cloud-consumer-openfeign-order
logging:
  level:
    com.jing.cloud.apis:
      PayFeignApi: debug
# 案例：按照请求次数配置：
# 6次访问中当执行方法的失败率达到50%时circuitBreaker将进入open状态拒绝所有请求
# 等待5秒后，circuitBreaker将自动从open状态过渡到half_open状态，允许一些请求通过用于测试服务是否恢复正常
# 如果还是异常，circuitBreaker将重新进入open状态，若正常将进入close闭合状态恢复请求处理
#resilience4j:
#  circuitbreaker:
#    configs:
#      default:
#        failure-rate-threshold: 50 #若设置50%的调用失败时打开断路器，超过失败请求百分比circuitBreaker变为open状态
#        sliding-window-type: count_based # 滑动窗口类型
#        sliding-window-size: 6 #滑动窗口的大小配置count_based表示6个请求，配置time_based表示6秒
#        minimum-number-of-calls: 6 # 断路器计算失败率或慢调用率之前所需的最小样本(每个滑动窗口周期)。如果minimum_number_of_calls为10，则必须最少记录10个样本，然后才能计算失败率，若只记录9次调用，则使所有的9次调用都失败，断路器也不会开启
#        automatic-transition-from-open-to-half-open-enabled: true # 是否启用自动从开启状态过渡到半开状态。默认值为true。如果启用，circuitBreaker将自动从开启状态过渡到半开状态，并允许一些请求通过用于测试服务是否恢复正常
#        wait-duration-in-open-state: 5s #从open状态到half_open状态需要等待的时间
#        permitted-number-of-calls-in-half-open-state: 2 # 半开状态允许的最大请求数，默认值为10。在半开状态下，circuitBreaker将允许最多permitted-number-of-calls-in-half-open-state个请求通过，若其中有任何一个请求失败，circuitBreaker将重新进入open状态
#        record-exceptions:
#          - java.lang.Exception
#    instances:
#      cloud-payment-service:
#        base-config: default
# ----------------------------------------------------time_based----------------------
resilience4j:
  timelimiter:
    configs:
      default:
        timeout-duration: 10s #timelimiter默认限制远程1s，超于1s就超时异常，配置了降级，就走降级逻辑
  bulkhead:
    configs:
      default:
        max-concurrent-calls: 2 #隔离允许并发线程执行的最大数量
        max-wait-duration: 1s #当达到并发调用数量时，新的线程的阻塞时间。超时调用fallback
    instances:
      cloud-payment-service:
        base-config: default
  thread-pool-bulkhead:
    configs:
      default:
        max-thread-pool-size: 1
        core-thread-pool-size: 1
        queue-capacity: 1
    instances:
      cloud-payment-service:
        base-config: default
  circuitbreaker:
    configs:
      default:
        failure-rate-threshold: 50 #若设置50%的调用失败时打开断路器，超过失败请求百分比circuitBreaker变为open状态
        slow-call-duration-threshold: 2s # 慢调用时间阈值，高于则视为慢调用并增加慢调用比例
        slow-call-rate-threshold: 30 # 慢调用百分比峰值，断路器把调用时间大于slowCallDurationThreshold视为慢调用，当比例高于该配置时进入open状态
        sliding-window-type: time_based # 滑动窗口类型
        sliding-window-size: 2 #滑动窗口的大小，配置time_based表示2秒
        minimum-number-of-calls: 2 # 断路器计算失败率或慢调用率之前所需的最小样本(每个滑动窗口周期)。如果minimum_number_of_calls为10，则必须最少记录10个样本，然后才能计算失败率，若只记录9次调用，则使所有的9次调用都失败，断路器也不会开启
        automatic-transition-from-open-to-half-open-enabled: true # 是否启用自动从开启状态过渡到半开状态。默认值为true。如果启用，circuitBreaker将自动从开启状态过渡到半开状态，并允许一些请求通过用于测试服务是否恢复正常
        wait-duration-in-open-state: 5s #从open状态到half_open状态需要等待的时间
        permitted-number-of-calls-in-half-open-state: 2 # 半开状态允许的最大请求数，默认值为10。在半开状态下，circuitBreaker将允许最多permitted-number-of-calls-in-half-open-state个请求通过，若其中有任何一个请求失败，circuitBreaker将重新进入open状态
        record-exceptions:
          - java.lang.Exception
    instances:
      cloud-payment-service:
        base-config: default
  ratelimiter:
    configs:
      default:
        limit-for-period: 2 # 在一次刷新周期内，允许执行的最大请求数
        limit-refresh-period: 1s # 限流器每隔limit-refresh-period刷新一次，将允许处理的最大请求数重置为limit-for-period
        timeout-duration: 1 # 线程等待权限的默认等待时间
    instances:
      cloud-payment-service:
        base-config: default